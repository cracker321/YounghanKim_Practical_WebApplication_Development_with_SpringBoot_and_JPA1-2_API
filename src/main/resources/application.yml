server:
  port: 8080


spring:
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
  h2:
    console:
      enabled: true
      path: /h2-console
      # localhost:8080/h2-console 로 접속하면 됨.
  datasource:
    url: jdbc:h2:~/jpashop
    username: sa
    password:
    driver-class-name: org.h2.Driver
  jpa:
    hibernate:
      ddl-auto: create   #스프링의 'ddl-auto' 기본 설정은 'create-drop
                       # -'none': 한 번 데이터를 넣어두면, 그게 사라지지 않고 계속 서버 재실행해도 데이터가 유지됨.
                       # -'create': 내가 현재 가지고 있는 '엔티티들을 다 drop 후에 다시 엔티티 create 하고 애플리케이션 실행'시킴.
                       # -'create-drop': 'create'와 동일하되, '애플리케이션을 종료할 때 drop 쿼리를 DB로 날려서
                       #                 기존의 엔티티 등 데이터들을 다 삭제'시킴.
    show-sql: true #김영한 강의에서는 이게 'format_sql'과 동일 레벨에 있어야 한다는데...
    defer-datasource-initialization: true #각종 DB의 버전 변경사항이 있더라도, 이전 버전 사용했던 것을 업데이트 이후에도 그대로 사용가능하게 하는 것
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
        use_sql_comments: true
        highlight_sql: true


  messages:
    basename: messages #우리가 사용할 메시지 파일(다국어 파일)의 이름을 'messages'라고 저장하는 것
    #'리소스 폴더'-->'messages.properties'를 만들어준다. 여기서 'messages'는 바로 여기 'yml 파일'에서 작성한
    #'basename: messages'의 'messages'와 동일하게 해줘야 함!


  devtools:
    livereload:
      enabled: true


logging:
  level:
    org:
      springframework: DEBUG
      org.hibernate.SQL: DEBUG
      org.hibernate.type: trace
    hibernate: DEBUG
    

# ??? ??? JPA ???? ??
#logging.level:
# org.hibernate.SQL: debug
# org.hibernate.type: trace #??? ?? 2.x, hibernate5.
# org.hibernate.orm.jdbc.bind: trace #??? ?? 3.x, hibernate6
